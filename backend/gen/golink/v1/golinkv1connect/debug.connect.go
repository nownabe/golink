// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: golink/v1/debug.proto

package golinkv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nownabe/golink/backend/gen/golink/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DebugServiceName is the fully-qualified name of the DebugService service.
	DebugServiceName = "golink.v1.DebugService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DebugServiceDebugProcedure is the fully-qualified name of the DebugService's Debug RPC.
	DebugServiceDebugProcedure = "/golink.v1.DebugService/Debug"
)

// DebugServiceClient is a client for the golink.v1.DebugService service.
type DebugServiceClient interface {
	Debug(context.Context, *connect_go.Request[v1.DebugRequest]) (*connect_go.Response[v1.DebugResponse], error)
}

// NewDebugServiceClient constructs a client for the golink.v1.DebugService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDebugServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DebugServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &debugServiceClient{
		debug: connect_go.NewClient[v1.DebugRequest, v1.DebugResponse](
			httpClient,
			baseURL+DebugServiceDebugProcedure,
			opts...,
		),
	}
}

// debugServiceClient implements DebugServiceClient.
type debugServiceClient struct {
	debug *connect_go.Client[v1.DebugRequest, v1.DebugResponse]
}

// Debug calls golink.v1.DebugService.Debug.
func (c *debugServiceClient) Debug(ctx context.Context, req *connect_go.Request[v1.DebugRequest]) (*connect_go.Response[v1.DebugResponse], error) {
	return c.debug.CallUnary(ctx, req)
}

// DebugServiceHandler is an implementation of the golink.v1.DebugService service.
type DebugServiceHandler interface {
	Debug(context.Context, *connect_go.Request[v1.DebugRequest]) (*connect_go.Response[v1.DebugResponse], error)
}

// NewDebugServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDebugServiceHandler(svc DebugServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	debugServiceDebugHandler := connect_go.NewUnaryHandler(
		DebugServiceDebugProcedure,
		svc.Debug,
		opts...,
	)
	return "/golink.v1.DebugService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DebugServiceDebugProcedure:
			debugServiceDebugHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDebugServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDebugServiceHandler struct{}

func (UnimplementedDebugServiceHandler) Debug(context.Context, *connect_go.Request[v1.DebugRequest]) (*connect_go.Response[v1.DebugResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("golink.v1.DebugService.Debug is not implemented"))
}
