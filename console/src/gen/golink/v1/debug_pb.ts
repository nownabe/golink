// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file golink/v1/debug.proto (package golink.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message golink.v1.DebugRequest
 */
export class DebugRequest extends Message<DebugRequest> {
  constructor(data?: PartialMessage<DebugRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "golink.v1.DebugRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebugRequest {
    return new DebugRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebugRequest {
    return new DebugRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebugRequest {
    return new DebugRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DebugRequest | PlainMessage<DebugRequest> | undefined, b: DebugRequest | PlainMessage<DebugRequest> | undefined): boolean {
    return proto3.util.equals(DebugRequest, a, b);
  }
}

/**
 * @generated from message golink.v1.DebugResponse
 */
export class DebugResponse extends Message<DebugResponse> {
  constructor(data?: PartialMessage<DebugResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "golink.v1.DebugResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DebugResponse {
    return new DebugResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DebugResponse {
    return new DebugResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DebugResponse {
    return new DebugResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DebugResponse | PlainMessage<DebugResponse> | undefined, b: DebugResponse | PlainMessage<DebugResponse> | undefined): boolean {
    return proto3.util.equals(DebugResponse, a, b);
  }
}

