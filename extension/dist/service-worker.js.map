{"mappings":"A,C,KCAA,IAAM,EAAe,YAErB,eAAe,EAAmB,CAAW,EAG3C,IAAM,EAAO,IAAI,IAAI,GAAK,IAA1B,CACA,QAAQ,GAAA,CAAI,CAAC,0BAA0B,EAAE,EAAK,CAAC,EAsB/C,MAAM,OAAO,qBAAA,CAAsB,kBAAA,CALT,CACxB,cAAe,CArBF,EAqBU,CACvB,SAAU,CAjBS,CACnB,GANa,EAOb,SAAU,EACV,OAAQ,CACN,KAAM,WACN,SAAU,CACR,UAAW,CAAE,OAAQ,QAAS,KAAM,CAAK,CAC3C,CACF,EACA,UAAW,CACT,UAAW,WACX,cAAe,CAAC,aAAa,AAC/B,CACF,EAI0B,AAC1B,EAGF,CAEA,eAAe,IACb,IAAM,EAAO,AAAA,CAAA,MAAM,OAAO,OAAA,CAAQ,IAAA,CAAK,GAAA,CAAI,EAAA,CAAc,CAAC,EAAa,AAEvE,OAAM,EAAmB,GAEzB,OAAO,OAAA,CAAQ,SAAA,CAAU,WAAA,CACvB,MACE,EACA,KAEkB,SAAd,GAAwB,KAAgB,GAC1C,MAAM,EAAmB,CAAO,CAAC,EAAa,CAAC,QADjD,CAGF,EAEJ,CAEA,OAAO,OAAA,CAAQ,WAAA,CAAY,WAAA,CAAY,E,C","sources":["<anon>","src/background/service-worker.ts"],"sourcesContent":["(() => {\nconst $ac9b74988c1349be$var$golinkUrlKey = \"golinkUrl\";\nasync function $ac9b74988c1349be$var$updateRedirectRule(url) {\n    const ruleId = 1;\n    const host = new URL(url).host;\n    console.log(`Updating redirect rule to ${host}`);\n    const redirectRule = {\n        id: ruleId,\n        priority: 1,\n        action: {\n            type: \"redirect\",\n            redirect: {\n                transform: {\n                    scheme: \"https\",\n                    host: host\n                }\n            }\n        },\n        condition: {\n            urlFilter: \"*://go/*\",\n            resourceTypes: [\n                \"main_frame\"\n            ]\n        }\n    };\n    const updateRuleOptions = {\n        removeRuleIds: [\n            ruleId\n        ],\n        addRules: [\n            redirectRule\n        ]\n    };\n    await chrome.declarativeNetRequest.updateDynamicRules(updateRuleOptions);\n}\nasync function $ac9b74988c1349be$var$initialize() {\n    const url = (await chrome.storage.sync.get($ac9b74988c1349be$var$golinkUrlKey))[$ac9b74988c1349be$var$golinkUrlKey];\n    await $ac9b74988c1349be$var$updateRedirectRule(url);\n    chrome.storage.onChanged.addListener(async (changes, namespace)=>{\n        if (namespace === \"sync\" && $ac9b74988c1349be$var$golinkUrlKey in changes) await $ac9b74988c1349be$var$updateRedirectRule(changes[$ac9b74988c1349be$var$golinkUrlKey].newValue);\n    });\n}\nchrome.runtime.onInstalled.addListener($ac9b74988c1349be$var$initialize);\n\n})();\n//# sourceMappingURL=service-worker.js.map\n","const golinkUrlKey = \"golinkUrl\";\n\nasync function updateRedirectRule(url: string) {\n  const ruleId = 1;\n\n  const host = new URL(url).host;\n  console.log(`Updating redirect rule to ${host}`);\n\n  const redirectRule = {\n    id: ruleId,\n    priority: 1,\n    action: {\n      type: \"redirect\",\n      redirect: {\n        transform: { scheme: \"https\", host: host },\n      },\n    },\n    condition: {\n      urlFilter: \"*://go/*\",\n      resourceTypes: [\"main_frame\"],\n    },\n  };\n\n  const updateRuleOptions = {\n    removeRuleIds: [ruleId],\n    addRules: [redirectRule],\n  };\n\n  await chrome.declarativeNetRequest.updateDynamicRules(updateRuleOptions);\n}\n\nasync function initialize() {\n  const url = (await chrome.storage.sync.get(golinkUrlKey))[golinkUrlKey];\n\n  await updateRedirectRule(url);\n\n  chrome.storage.onChanged.addListener(\n    async (\n      changes: { [key: string]: chrome.storage.StorageChange },\n      namespace: string,\n    ) => {\n      if (namespace === \"sync\" && golinkUrlKey in changes) {\n        await updateRedirectRule(changes[golinkUrlKey].newValue);\n      }\n    },\n  );\n}\n\nchrome.runtime.onInstalled.addListener(initialize);\n"],"names":["$ac9b74988c1349be$var$golinkUrlKey","$ac9b74988c1349be$var$updateRedirectRule","url","host","URL","console","log","chrome","declarativeNetRequest","updateDynamicRules","removeRuleIds","addRules","id","priority","action","type","redirect","transform","scheme","condition","urlFilter","resourceTypes","$ac9b74988c1349be$var$initialize","storage","sync","get","onChanged","addListener","changes","namespace","newValue","runtime","onInstalled"],"version":3,"file":"service-worker.js.map"}